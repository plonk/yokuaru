* よくある杖と敵ソルバーを変更して二豚方位を解けるようにする

なんか、フェイ問リーダーのクラスが持っている状態をコピーしたものを作り
込むだけの作業な気がする。

Room = Fei::Room とか
class Room < Fei::Room
とかでいいんでないか。

ソルバーがフェイ問リーダーのクラスツリーに依存するのはよくない気がする。
でも、依存させないと同型なクラスを作るだけになってしまう…。←それでいいや。

** DONE フェイ問ファイルからフロアを読み込めるようにする
** DONE 敵にかなしば状態を作る
** TODO 敵の移動・行動フェーズを作る
「もしもし亀よ」ソルバーでそのような物を作ったので、それを参考にする。
両者のコマンドの仕組みが違うはずなので、それを調べる。

もしもし亀よでは、コマンドクラスというようなものはなくて、コマンドの種
類を表わすシンボルと、引数のリストになっていた。例: [:attack]、[:move, [-1, 0]]。

*** 状態の遷移の仕方の変更
旧来の Board の計算は、元の状態に対して、アスカの可能な全コマンドを実行して次
の状態群を作る。これをもしもし亀よ型にしたい。

1. 初期状態にアスカのコマンドを実行する。複数の状態を生む。
2. それぞれの状態について、モンスターのターンを実行する。(それぞれ複数
   の状態を生む)
3. それぞれの状態のターンを1つ増やす。

**** モンスターのターンについて
何を行うか、2度モンスターに訊く。最初のクエリで移動・行動するフェーズ
が決定するが、実際に移動・行動する段になって状況が変化する場合がある。

1. モンスターが与えられた Board について移動するか行動するかを決定する。
2. 移動することを選択したモンスターを、順番にそれぞれ実際に移動させる。
3. 行動することを選択したモンスターを、順番にそれぞれ実際に行動させる。

*** Board のモンスターの持ち方
順不同の配列クラスである Bag で持っている(何らかの理由でSetで苦労した
覚え)。行動順が関わってくるような問題を解くなら、モンスターの順序を無
視するわけにはいかないだろう。

*** TODO 今回のコードベースでのコマンドクラスをドキュメントする
アスカの行動はコマンドになっているけど、モンスターの行動ではない。
Command{Pick, Throw, Drop, Move, Use}

動作主を引数としてエンコードする必要あり？

二豚方位ソルバーに限ってはモンスターの移動を実装する必要はない。少しず
つ変更するのは多分正しい姿勢。

**** 特技を使うコマンドが要るだろう
実際の挙動はモンスターのクラスで実装されるだろう。動作主をコマンドの引
数としてエンコードする必要がるだろう。

***** DONE コマンドクラスの名前を考える
CommandSkill でいいか。

*** 敵の取りうる行動を乱数を考慮して全て数え上げるべきか考える
二豚方位では敵の行動をリアリスティックにしてもうれしくない。

** DONE デブートンのAIを実装する
ターンがまわってきたときに不思議な力でアスカを即死させるってことでいいか。
** DONE 部屋を実装する
** DONE アイテムに祝福・呪い状態を実装する
** DONE 高とび草の効果を実装する
- 飲んだ場合と敵に当てた場合
- 祝福されていた場合

* どのようにテストを実行するか

- どこにテストを置くのか
- テストと実際のコードの関係とは
- どのようにテストを実行するのか(rake test)
- いつテストを実行するのか(なぜプログラムの実行毎にではいけないか？)

* 単体テストを書く

** どのテストハーネスを使うか

- Rspec
- Runit

*** Test::Unit

test-unit をインストールする。

**** TODO アサートの書きかたを覚える
**** TODO 例外の検出のしかたを覚える
**** TODO テストの実行のしかたを覚える

** 何をカバーするか

Things near the bottom.

ゲームオブジェクトの振舞いのテストを書く

等価性や、Hashに登録できるかなど。

** 基準

- 変更する箇所をテストでカバーするべき

* パフォーマンスの把握と改善

「よくある杖と敵」を解かせていたときよりも、計算が遅くなっている気がす
る。

予測できる困難としては、コマンドやボードの状態によって処理内容が違うの
で、パフォーマンスを定量化しにくいのではないかということ。

** パフォーマンスを計測するテストを書く

** どこが遅いのかプロファイルを取る

よくある杖と敵。ワナ潰しを奨励する評価関数で、解けるまで。
user    2m8.316s
状態数: 18111

  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 20.50     0.49      0.49    21103     0.02     0.35  Array#each
 17.57     0.91      0.42   451225     0.00     0.01  Object#positions
  9.62     1.14      0.23   307454     0.00     0.00  Array#==
  8.37     1.34      0.20   444257     0.00     0.00  String#==
  7.11     1.51      0.17     1230     0.14     0.41  Array#include?
  4.18     1.61      0.10   307083     0.00     0.00  Fixnum#==
  3.77     1.70      0.09    47723     0.00     0.00  Array#hash
  2.93     1.77      0.07    69350     0.00     0.00  Fei::Floor#read_chikei
  2.09     1.82      0.05    44324     0.00     0.00  Hash#[]=
  1.67     1.86      0.04    14480     0.00     0.16  Enumerable#flat_map
  1.67     1.90      0.04    18433     0.00     0.00  Board#rooms
  1.67     1.94      0.04    44262     0.00     0.01  Set#merge
  1.67     1.98      0.04    44240     0.00     0.00  Set#add
  1.26     2.01      0.03      494     0.06     0.10  Marshal.dump

** Item#hikiyose_move 内からの positions の呼び出しを消した。

意味なかった。

  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 20.91     0.87      0.87    58407     0.01     0.15  Array#each
 18.03     1.62      0.75  1011224     0.00     0.00  Object#positions
 12.02     2.12      0.50   698756     0.00     0.00  Array#==
  8.17     2.46      0.34     3546     0.10     0.27  Array#include?
  5.05     2.67      0.21   995783     0.00     0.00  String#==
  3.61     2.82      0.15    69350     0.00     0.01  Fei::Floor#read_chikei
  3.13     2.95      0.13   695702     0.00     0.00  Fixnum#==
  2.64     3.06      0.11   112733     0.00     0.00  Array#hash
  1.68     3.13      0.07   253695     0.00     0.00  Kernel#hash
  1.68     3.20      0.07   102585     0.00     0.00  Hash#[]=
  1.44     3.26      0.06    56993     0.00     0.00  Board#rooms
  1.20     3.31      0.05    27563     0.00     0.00  Enumerable#find_by
  1.20     3.36      0.05   102374     0.00     0.00  Set#add
  1.20     3.41      0.05     1508     0.03     0.06  Marshal.dump

** Object#max_trajectory からも positions の呼び出しを消した。

  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 11.11     0.18      0.18   114372     0.00     0.00  Board#rooms
  7.41     0.30      0.12    85015     0.00     0.03  Array#each
  5.56     0.39      0.09     2969     0.03     0.04  Marshal.dump
  5.56     0.48      0.09    69350     0.00     0.00  Fei::Floor#read_chikei
  4.94     0.56      0.08   107157     0.00     0.00  Kernel#instance_variable_get
  4.32     0.63      0.07    29284     0.00     0.01  Bag#-
  3.70     0.69      0.06    53827     0.00     0.00  Enumerable#find_by
  3.70     0.75      0.06    25783     0.00     0.01  Board#asuka
  3.09     0.80      0.05    46419     0.00     0.00  Kernel#dup
  3.09     0.85      0.05    16207     0.00     0.01  Struct#hash
  2.47     0.89      0.04    55775     0.00     0.00  Bag#each
  2.47     0.93      0.04    18352     0.00     0.02  Array#map
  2.47     0.97      0.04    10596     0.00     0.00  Character#<=>
  1.85     1.00      0.03   134010     0.00     0.00  Kernel#respond_to_missing?
  1.85     1.03      0.03     2969     0.01     0.01  Marshal.load
  1.85     1.06      0.03    20529     0.00     0.03  Board#eql?
  1.85     1.09      0.03    96538     0.00     0.00  Kernel#hash
  1.85     1.12      0.03     4871     0.01     0.01  Map#within_bounds?
  1.23     1.14      0.02    26270     0.00     0.00  Class#new
  1.23     1.16      0.02    46419     0.00     0.00  Kernel#initialize_dup
  1.23     1.18      0.02    56674     0.00     0.00  Array#[]
  1.23     1.20      0.02     6117     0.00     0.00  Vec#plus
  1.23     1.22      0.02    18880     0.00     0.00  Bag#initialize
  1.23     1.24      0.02    11599     0.00     0.00  Board#items
  1.23     1.26      0.02    31320     0.00     0.00  Array#==
  1.23     1.28      0.02     5017     0.00     0.04  Program#commands
  1.23     1.30      0.02     4764     0.00     0.07  CommandThrow#execute_normal_throw
  1.23     1.32      0.02     7947     0.00     0.02  Bag#==
  1.23     1.34      0.02     4867     0.00     0.57  Program#search

** 結果

real    2分30秒 → 44秒
user    2m8.316s → 0m14.048 (信頼できない)
状態数: 18111 → 15793
120状態/秒 →359状態/秒

3.4倍くらい速くなったかもしれない。
状態数の数が合わないのは、バグを作り込んだんだろうか。

* 足元アイテムの取扱いの問題

* ﾋｷﾖｾﾏｼﾏｼを解けるようにするためのアイデア？

賢い評価関数が要る気がする。豚の位置をハードコードしてもだめだなー。


まず手で書けるか。

問題によって、評価関数を自動生成できるか。

最良優先探索以外のアルゴリズムの選択肢があるか？

